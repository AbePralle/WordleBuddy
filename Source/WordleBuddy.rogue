#================================================================================
# WordleBuddy.rogue
# January 5, 2022
#================================================================================
$define VERSION "Wordle Buddy v1.3"
$define AUTHOR  "January 7, 2022 by Abe Pralle"

$requireRogue "1.12"

$include "Game.rogue"
$include "GameState.rogue"
$include "Letters.rogue"
$include "MainDictionary.rogue"
$include "Solver.rogue"
$include "WordList.rogue"

uses Utility/Best
uses Utility/CommandLineParser

try
  WordleBuddy( System.command_line_arguments.cloned )
catch (error:Error)
  Console.error.println error
  System.exit 1
endTry

class WordleBuddy
  # Uses "official" Wordle word lists courtesy of twitch.tv/graham
  #   https://observablehq.com/@iamgrahamallen/wordle-solver-exploration
  #   https://observablehq.com/@iamgrahamallen/wordle-solver-exploration-part-2
  #
  # Uses letter frequencies from here:
  #   https://www3.nd.edu/~busiforc/handouts/cryptography/letterfrequencies.html
  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      if (command.is_undefined)
        print_usage
        System.exit 0
      endIf

      if (command//list)
        local letters : String
        if (command//letters) letters = command//letters->String
        list( command//pattern, letters )

      elseIf (command//game)
        Game( &solver=command//solver? ).play

      else
        Solver().play

      endIf

    method list( pattern:String, letters:String )
      local gamestate = GameState()
      gamestate.filter( pattern )
      if (letters)
        gamestate.candidates.remove_words_not_containing( forEach in letters.to_lowercase )
      endIf
      println (forEach in gamestate.candidates)

    method parse_args( args:String[] )->Value
      contingent
        necessary (args.count)

        if (args.first == "list")
          necessary (args.count == 2 or args.count == 4)
          local pattern = args[1]
          if (pattern.count != 5)
            println ''Pattern must contain 5 characters; "$" contains $ characters.''(pattern,pattern.count)
            return UndefinedValue
          endIf

          local result = @{ list:true, :pattern }
          if (args.count == 4)
            necessary (args[2] == "containing")
            result//letters = args[3]
          endIf

          return result
        endIf

        local result = @{}
        if (args.contains("game"))
          args.remove( "game" )
          result//game = true
        endIf

        if (args.contains("solver"))
          args.remove( "solver" )
          result//solver = true
        endIf

        necessary (args.is_empty)
        return result

      unsatisfied
        return UndefinedValue

      endContingent

    method print_usage
      println VERSION
      println AUTHOR
      println
      println @|USAGE
               |  wordlebuddy solver
               |  wordlebuddy game
               |  wordlebuddy game solver
               |  wordlebuddy list <pattern>
               |  wordlebuddy list <pattern> containing <letters>
               |
               |DESCRIPTION
               |  wordlebuddy solver
               |    Interactively assists in solving an online Wordle puzzle.
               |
               |  wordlebuddy game
               |    Plays a Wordle game without solver assistance.
               |
               |  wordlebuddy game solver
               |    Plays a Wordle game with solver assistance.
               |
               |  wordlebuddy list "<pattern>"
               |    List possible words that match the given 5-character pattern.
               |
               |    <pattern>
               |      * - Match words with any character at this position.
               |      A - Match words with an 'A' at this position.
               |      a - Match words with an 'A' NOT at this position.
               |
               |  wordlebuddy list "<pattern>" containing <letters>
               |    Lists words matching the pattern (which can be "*****") AND
               |    containing all the given letters.
               |
               |
               |EXAMPLES
               |  wordlebuddy list "r*O*T"
               |    # List words that have 'O' in the middle, end in 'T', and
               |    # contain an 'R' but don't start with it.
               |
               |  wordlebuddy list "*O**c" containing tu
               |    # List words that have O as the second letter, contain 'C'
               |    # but not as the last letter, and contain the letters 'T'
               |    # and 'U' anywhere.

endClass

